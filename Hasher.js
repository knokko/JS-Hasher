const Hasher = {
	/**
	 * This method uses the password and salt of the user to generate the secret properties of the account. It will
	 * return an object containing the following properties:
	 * 
	 * The serverStartSeed is half of the seed that the server will use for the random number generator that will be used
	 * to encrypt/decrypt the testPayload. It will be stored on the server and the server will use it to encrypt the
	 * testPayload so that the client can decrypt it. If the client sees that the server knows how to encrypt it,
	 * it knows that he is speaking with the right server.
	 * 
	 * The clientStartSeed is the seed of the random number generator that is used to generate the testPayload. It is
	 * NOT stored on the server. It will be used by the client to confirm that he is the user of the account later.
	 * 
	 * The testPayload will be generated using the clientStartSeed. It will be stored on the server.
	 * 
	 * @param {string} password The password of the user, as obtained from the text edit field
	 * @param {string} salt The salt of the user, as generated by the server
	 */
	clientHash : function(password, salt){
		const buffer = new BitHelper.ByteArrayBitOutput(new Int8Array(2 * (password.length + salt.length)));
		for(let index = 0; index < password.length; index++){
			buffer.writeChar(password.charCodeAt(index));
		}
		for(let index = 0; index < salt.length; index++){
			buffer.writeChar(salt.charCodeAt(index));
		}
		const random = createPseudoRandomArray(buffer.array);

		const clientSessionSeed = random.nextInts(24);
		const serverSessionSeed = random.nextInts(24);
		const clientStartSeed = random.nextBytes(256);
		const serverStartSeed = random.nextInts(24);
		const testPayload = createPseudoRandomArray(clientStartSeed).nextBytes(300);
		return {
			clientSessionSeed : clientSessionSeed,
			serverSessionSeed : serverSessionSeed,
			clientStartSeed : clientStartSeed,
			serverStartSeed : serverStartSeed,
			testPayload : testPayload
		};
	},

	createRandom : function(halfSeed1, halfSeed2){
		if (halfSeed1.length !== halfSeed2.length){
			throw 'Both half seeds must have the same length';
		}
		const length = halfSeed1.length;
		const bytes = new Int8Array(8 * length);

		for (let index = 0; index < length; index++){
			let byteIndex = index * 8;
			bytes[byteIndex++] = BitHelper.int2(halfSeed2[index]);
			bytes[byteIndex++] = BitHelper.int1(halfSeed1[index]);
			bytes[byteIndex++] = BitHelper.int2(halfSeed1[index]);
			bytes[byteIndex++] = BitHelper.int3(halfSeed2[index]);
			bytes[byteIndex++] = BitHelper.int0(halfSeed1[index]);
			bytes[byteIndex++] = BitHelper.int1(halfSeed2[index]);
			bytes[byteIndex++] = BitHelper.int0(halfSeed2[index]);
			bytes[byteIndex] = BitHelper.int3(halfSeed1[index]);
		}
		
		return createPseudoRandomArray(bytes);
	}
};